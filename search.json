[{"path":"https://stochagbem.github.io/sxchan/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Vincenzo Coia. Author. Jane Wang. Author. Lucy MacKenzie. Author, maintainer. Brett Eaton. Author. Sarah Davidson. Author.","code":""},{"path":"https://stochagbem.github.io/sxchan/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Coia V, Wang J, MacKenzie L, Eaton B, Davidson S (2024). sxchan: Simple Channel Cross Sections. R package version 0.1.0, https://stochagbem.github.io/sxchan/.","code":"@Manual{,   title = {sxchan: Simple Channel Cross Sections},   author = {Vincenzo Coia and Jane Wang and Lucy MacKenzie and Brett Eaton and Sarah Davidson},   year = {2024},   note = {R package version 0.1.0},   url = {https://stochagbem.github.io/sxchan/}, }"},{"path":"https://stochagbem.github.io/sxchan/index.html","id":"sxchan-simple-channel-cross-sections","dir":"","previous_headings":"","what":"Simple Channel Cross Sections","title":"Simple Channel Cross Sections","text":"purpose sxchan create manipulate watercourse geometries, focus cross sections. package sits top sf package, geometries can also manipulated way sf package. name package inspired sf package. Functions sxchan start common prefix, xt, stands “cross-section type”; intended parallel sf package’s function prefix, st, stands “spatial type”.","code":""},{"path":"https://stochagbem.github.io/sxchan/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simple Channel Cross Sections","text":"can install development version sxchan GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"stochaGBEM/sxchan\")"},{"path":"https://stochagbem.github.io/sxchan/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Simple Channel Cross Sections","text":"","code":"library(sxchan) library(sf) #> Linking to GEOS 3.11.0, GDAL 3.5.3, PROJ 9.1.0; sf_use_s2() is TRUE"},{"path":"https://stochagbem.github.io/sxchan/index.html","id":"constructing-cross-section-objects","dir":"","previous_headings":"Example","what":"Constructing cross section objects","title":"Simple Channel Cross Sections","text":"Cross section objects can made using function xt_sxc(), “sxc” stands “spatial cross-section column”. Simply specify cross section width ’re interested spatial arrangement cross sections:  , can turn series line segments cross section object. time, set coordinate reference system, :  Retrieve widths: cross sections just sfc objects sf package, can add features making sf object:","code":"cross1 <- xt_sxc(c(8, 7, 5, 6, 5, 8)) plot(cross1) seg <- st_linestring(matrix(c(0, 1, 0, 1), ncol = 2)) cross2 <- xt_sxc(seg, crs = 3005) plot(cross2) xt_width(cross1) #> [1] 8 7 5 6 5 8 xt_width(cross2) #> 1.414214 [m] # st_sf(cross1, swimmability = c(5, 4, 3, 2, 1, 0), roughness = 0.01)"},{"path":"https://stochagbem.github.io/sxchan/index.html","id":"generating-geometries-from-bankline-polygon","dir":"","previous_headings":"Example","what":"Generating geometries from bankline polygon","title":"Simple Channel Cross Sections","text":"sxchan built-demo bankline polygon:  can generate cross sections centerline:  can widen cross sections, either constant amount one per cross section:","code":"plot(demo_bankline) demo_cross <- xt_generate_sxc(demo_bankline, n = 50) demo_center <- xt_generate_centerline(demo_bankline) plot(demo_bankline) plot(demo_cross, add = TRUE, col = \"blue\") plot(demo_center, add = TRUE) plot(demo_bankline) xt_widen_times(demo_cross, times = 0.7) |>    plot(add = TRUE, col = \"blue\") set.seed(1) plot(demo_bankline) xt_widen_times(demo_cross, times = exp(rnorm(50) / 2)) |>    plot(add = TRUE, col = \"blue\")"},{"path":"https://stochagbem.github.io/sxchan/reference/demo_bankline.html","id":null,"dir":"Reference","previous_headings":"","what":"Demonstration Bankline Polygon Object — demo_bankline","title":"Demonstration Bankline Polygon Object — demo_bankline","text":"Bankline polygon segment hypothetical stream.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/demo_bankline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Demonstration Bankline Polygon Object — demo_bankline","text":"","code":"demo_bankline"},{"path":"https://stochagbem.github.io/sxchan/reference/demo_bankline.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Demonstration Bankline Polygon Object — demo_bankline","text":"polygon sfc object coordinate reference system 3005 (BC Albers projection).","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/demo_bankline.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Demonstration Bankline Polygon Object — demo_bankline","text":"demo bankline polygon generated using following code, using sf version 1.0.16 R version 4.3.3.","code":"demo_bankline <- sf::st_as_sf(tibble::tribble(   ~x, ~y,   656873.7, 5553711,   656993.1, 5553738,   656993.6, 5553738,   656994.1, 5553738,   656994.6, 5553738,   656995.1, 5553738,   656995.7, 5553738,   656996.2, 5553738,   656996.7, 5553738,   656997.2, 5553738,   656997.7, 5553738,   656998.2, 5553738,   656998.7, 5553738,   656999.2, 5553738,   656999.7, 5553737,   657000.2, 5553737,   657000.6, 5553737,   657001.0, 5553737,   657001.5, 5553736,   657001.9, 5553736,   657002.3, 5553736,   657002.6, 5553735,   657003.0, 5553735,   657003.3, 5553734,   657003.6, 5553734,   657126.8, 5553550,   657127.0, 5553550,   657127.3, 5553549,   657127.5, 5553549,   657127.7, 5553548,   657127.9, 5553548,   657128.1, 5553548,   657128.2, 5553547,   657128.3, 5553546,   657128.4, 5553546,   657128.4, 5553545,   657128.4, 5553545,   657129.8, 5553466,   657129.8, 5553465,   657129.7, 5553465,   657129.7, 5553464,   657129.6, 5553464,   657129.5, 5553463,   657129.4, 5553463,   657129.2, 5553462,   657129.0, 5553462,   657128.8, 5553461,   657128.6, 5553461,   657128.3, 5553460,   657128.1, 5553460,   657127.8, 5553459,   657127.4, 5553459,   657127.1, 5553459,   657126.7, 5553458,   657126.4, 5553458,   657126.0, 5553458,   656995.2, 5553355,   656971.7, 5553303,   656975.2, 5553281,   657061.9, 5553229,   657233.8, 5553179,   657234.3, 5553179,   657234.8, 5553179,   657235.3, 5553179,   657235.9, 5553178,   657236.3, 5553178,   657312.0, 5553130,   657312.5, 5553130,   657312.9, 5553130,   657313.3, 5553129,   657313.7, 5553129,   657314.1, 5553128,   657314.5, 5553128,   657314.8, 5553128,   657315.1, 5553127,   657315.4, 5553127,   657315.6, 5553126,   657315.9, 5553126,   657316.1, 5553125,   657316.2, 5553125,   657406.2, 5552837,   657467.5, 5552813,   657534.9, 5552855,   657535.4, 5552855,   657535.9, 5552855,   657536.3, 5552855,   657536.8, 5552855,   657537.3, 5552856,   657537.8, 5552856,   657538.3, 5552856,   657538.8, 5552856,   657539.4, 5552856,   657539.9, 5552856,   657540.4, 5552856,   657540.9, 5552856,   657541.4, 5552856,   657542.0, 5552856,   657542.5, 5552856,   657543.0, 5552856),   coords = c(\"x\", \"y\")) |>   sf::st_combine() |>   sf::st_cast(\"LINESTRING\") |>   sf::st_buffer(100) sf::st_crs(demo_bankline) <- 3005"},{"path":"https://stochagbem.github.io/sxchan/reference/is_sxc.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if an object is a cross section set. — is_sxc","title":"Test if an object is a cross section set. — is_sxc","text":"Checks whether object inherits \"sxc\" class.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/is_sxc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if an object is a cross section set. — is_sxc","text":"","code":"is_sxc(x)"},{"path":"https://stochagbem.github.io/sxchan/reference/is_sxc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if an object is a cross section set. — is_sxc","text":"x object.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/is_sxc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test if an object is a cross section set. — is_sxc","text":"Logical; TRUE test passes.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/new_sx.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor functions for cross section objects — new_sxc","title":"Constructor functions for cross section objects — new_sxc","text":"Constructor functions cross section objects","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/new_sx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor functions for cross section objects — new_sxc","text":"","code":"new_sxc(l, ..., class = character())"},{"path":"https://stochagbem.github.io/sxchan/reference/new_sx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor functions for cross section objects — new_sxc","text":"l Object turn cross section. ... Attributes add object. class making subclass, specify name .","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/new_sx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor functions for cross section objects — new_sxc","text":"object class \"sxc\", although necessarily valid properties. naming \"sxc\" inspired sf package, names geometries features \"sfc\".","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_centerline.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to calculate a centerline from bankline polygon — xt_generate_centerline","title":"Function to calculate a centerline from bankline polygon — xt_generate_centerline","text":"Function calculate centerline bankline polygon","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_centerline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to calculate a centerline from bankline polygon — xt_generate_centerline","text":"","code":"xt_generate_centerline(bankline)"},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_centerline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to calculate a centerline from bankline polygon — xt_generate_centerline","text":"bankline Channel bankline polygon geometric object: sf, sfc, SpatVector polygons object.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_centerline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to calculate a centerline from bankline polygon — xt_generate_centerline","text":"centerline.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_centerline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Function to calculate a centerline from bankline polygon — xt_generate_centerline","text":"Wraps centerline::cnt_path_guess().","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_sxc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Cross Sections from Banklines — xt_generate_sxc","title":"Calculate Cross Sections from Banklines — xt_generate_sxc","text":"Calculate cross sections banklines roughly equally spaced apart.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_sxc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Cross Sections from Banklines — xt_generate_sxc","text":"","code":"xt_generate_sxc(bankline, n)"},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_sxc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Cross Sections from Banklines — xt_generate_sxc","text":"bankline sf object banklines. n number cross sections calculate.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_sxc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Cross Sections from Banklines — xt_generate_sxc","text":"\"sxc\" object.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_sxc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate Cross Sections from Banklines — xt_generate_sxc","text":"function takes definition \"cross section\" relative point channel line segment intersecting point whose bank--bank segment width smallest. Note imply cross section unique, case cross section arbitrarily taken one closest 0-degree angle – although almost cases issue. define spacing cross sections, centerline first calculated, equally spaced points sampled along centerline. Cross sections calculated points. Note cross sections necessary part choosing cross section spacing, useful.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_sxc.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate Cross Sections from Banklines — xt_generate_sxc","text":"function calculates bank--bank width given angle line crossing specified point riddled local minima. Currently, remedial approach taken mitigating : first finds minimum width grid 10 angles 0 pi (inclusive) (100 minimum unique first), optimizes width function around minimum found grid. slows algorithm noticeably, still possible, although likely rare, global minimum missed. improvement might involve choosing angles intersect neighbouring cross section. Another improvement consider ensure cross sections go left bank right bank. Since points sampled along centerline, less issue, still chance cross section identified \"bay\" channel.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_generate_sxc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Cross Sections from Banklines — xt_generate_sxc","text":"","code":"bl <- sf::st_sfc(demo_bankline, crs = 3005) cross <- xt_generate_sxc(bl, n = 100) plot(bl); plot(cross, add = TRUE, col = \"blue\")  # Inherits spatial properties of the bankline polygon, such as CRS: sf::st_crs(cross) #> Coordinate Reference System: NA"},{"path":"https://stochagbem.github.io/sxchan/reference/xt_span_banks.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a line segment from bank to bank — xt_span_banks","title":"Generate a line segment from bank to bank — xt_span_banks","text":"Given point within channel, generate line segment goes bank bank, specified angle.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_span_banks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a line segment from bank to bank — xt_span_banks","text":"","code":"xt_span_banks(pt, angle, bankline)"},{"path":"https://stochagbem.github.io/sxchan/reference/xt_span_banks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a line segment from bank to bank — xt_span_banks","text":"pt point within channel. angle angle line segment, radians. bankline bankline channel.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_span_banks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a line segment from bank to bank — xt_span_banks","text":"line segment spanning bank bank.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_span_banks.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Generate a line segment from bank to bank — xt_span_banks","text":"function precursor generating cross sections xt_generate_xsc().","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_span_banks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a line segment from bank to bank — xt_span_banks","text":"","code":"# Pick a point in the channel, and an angle library(sf) #> Linking to GEOS 3.10.2, GDAL 3.4.1, PROJ 8.2.1; sf_use_s2() is TRUE pt <- st_centroid(demo_bankline) - c(0, 30) plot(demo_bankline) plot(pt, add = TRUE)  ## 45 degrees: span <- xt_span_banks(pt, angle = pi / 4, bankline = demo_bankline) plot(span, add = TRUE, col = \"blue\")  ## 0 degrees: span <- xt_span_banks(pt, angle = 0, bankline = demo_bankline) plot(span, add = TRUE, col = \"blue\")"},{"path":"https://stochagbem.github.io/sxchan/reference/xt_sxc.html","id":null,"dir":"Reference","previous_headings":"","what":"Create channel cross sections object — xt_sxc","title":"Create channel cross sections object — xt_sxc","text":"Channel cross sections lightweight wrapper sf geometries (sfc objects), specifically collection line segments. means can use functions sf manipulate objects whenever special cross section methods exist.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_sxc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create channel cross sections object — xt_sxc","text":"","code":"xt_sxc(x, ...)"},{"path":"https://stochagbem.github.io/sxchan/reference/xt_sxc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create channel cross sections object — xt_sxc","text":"x Object create cross sections . Can vector (positive) widths spatial orientation important; can line segments created using sf package. ... Optional arguments passed sf::st_sfc() relating geometrical properties cross sections, crs.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_sxc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create channel cross sections object — xt_sxc","text":"channel cross section object, class \"sxc\", subclass sf's \"sfc_LINESTRING\" class. nomenclature inspired sf package, \"sxc\" stands \"spatial cross-section column\".","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_sxc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create channel cross sections object — xt_sxc","text":"","code":"# Create cross sections without worrying about spatial orientation. (a <- xt_sxc(1:3)) #> Simple cross section collection with 3 cross sections #> Geometry set for 3 features  #> Geometry type:  #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 1 xmax: 3 ymax: 3 #> CRS:           NA #> LINESTRING (0 1, 1 1) #> LINESTRING (0 2, 2 2) #> LINESTRING (0 3, 3 3) print(a) #> Simple cross section collection with 3 cross sections #> Geometry set for 3 features  #> Geometry type:  #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: 1 xmax: 3 ymax: 3 #> CRS:           NA #> LINESTRING (0 1, 1 1) #> LINESTRING (0 2, 2 2) #> LINESTRING (0 3, 3 3)  # Create cross sections from sf line segments, this time with a # coordinate reference system. Note that even though we input a # multilinestring, sxchan parses it into linestrings, so that each # cross section is a linestring. library(sf) seg <- st_multilinestring(list(   matrix(c(0, 1, 0, 1), ncol = 2),   matrix(c(0, 1.5, -0.5, 0), ncol = 2) )) b <- xt_sxc(seg, crs = 3005) plot(b)   # Because these objects are just sxc objects from the sf package, # we can manipulate them with sf. # - Subset to grab individual cross section line segments: b[[1]] #> LINESTRING (0 0, 1 1) b[[2]] #> LINESTRING (0 -0.5, 1.5 0)  # - Add arbitrary features to the cross sections. (b2 <- st_sf(b, roughness = 0.1, swimmability = c(4, 2))) #> Simple cross section collection with 2 cross sections #> Simple feature collection with 2 features and 2 fields #> Geometry type:  #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: -0.5 xmax: 1.5 ymax: 1 #> Projected CRS: NAD83 / BC Albers #>   roughness swimmability                          b #> 1       0.1            4      LINESTRING (0 0, 1 1) #> 2       0.1            2 LINESTRING (0 -0.5, 1.5 0)  # - Want to add / change more columns / features? It's just a data frame: b2$rockiness <- c(1, 1.1) b2 #> Simple cross section collection with 2 cross sections #> Simple feature collection with 2 features and 3 fields #> Geometry type:  #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: -0.5 xmax: 1.5 ymax: 1 #> Projected CRS: NAD83 / BC Albers #>   roughness swimmability                          b rockiness #> 1       0.1            4      LINESTRING (0 0, 1 1)       1.0 #> 2       0.1            2 LINESTRING (0 -0.5, 1.5 0)       1.1 plot(b2)   # - The geometry column is still a cross section object st_geometry(b2) #> Simple cross section collection with 2 cross sections #> Geometry set for 2 features  #> Geometry type:  #> Dimension:     XY #> Bounding box:  xmin: 0 ymin: -0.5 xmax: 1.5 ymax: 1 #> Projected CRS: NAD83 / BC Albers #> LINESTRING (0 0, 1 1) #> LINESTRING (0 -0.5, 1.5 0)"},{"path":"https://stochagbem.github.io/sxchan/reference/xt_widen.html","id":null,"dir":"Reference","previous_headings":"","what":"Widen cross sections — xt_widen_by","title":"Widen cross sections — xt_widen_by","text":"Widen narrow collection cross sections. xt_widen_by() widens (narrows) unit length; xt_widen_times() widens (narrows) multiplicative factor.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_widen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Widen cross sections — xt_widen_by","text":"","code":"xt_widen_by(object, by)  xt_widen_times(object, times)"},{"path":"https://stochagbem.github.io/sxchan/reference/xt_widen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Widen cross sections — xt_widen_by","text":"object cross section object. Amount widen channel , using units common cross sectional units. Negative values narrow cross sections. Either vector length equal number cross sections, length 1. times Multiplicative factor widen channel . Values less 1 narrow cross sections. Either vector length equal number cross sections, length 1.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_width.html","id":null,"dir":"Reference","previous_headings":"","what":"Get Channel Width — xt_width","title":"Get Channel Width — xt_width","text":"Get Channel Width","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_width.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get Channel Width — xt_width","text":"","code":"xt_width(object)"},{"path":"https://stochagbem.github.io/sxchan/reference/xt_width.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get Channel Width — xt_width","text":"object Cross section.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_width.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get Channel Width — xt_width","text":"Cross section width; single numeric.","code":""},{"path":"https://stochagbem.github.io/sxchan/reference/xt_width.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get Channel Width — xt_width","text":"","code":"xs <- xt_sxc(1:3) xt_width(xs) #> [1] 1 2 3"}]
